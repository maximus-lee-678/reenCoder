#pragma once
#include <stdint.h>
#include <stddef.h>

// [UTF-8]

// Purpose: Valid UTF-8 String (1-byte characters)
// String Contents: a string that contains 1 byte sequences when encoded in utf-8
// Encoding: UTF-8
// Bytes: 61 (62 with \0)
// Characters: 61
static const uint8_t _reencoder_test_string_utf_8_1_byte[] = {
	0x61, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x31, 0x20, 0x62, 0x79, 0x74, 0x65, 0x20, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x65, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x75, 0x74, 0x66, 0x2d, 0x38, 0x00
};

// Purpose: Valid UTF-8 String (2-byte characters)
// String Contents: строка, содержащая 2 байтовые последовательности при кодировке utf-8
// Encoding: UTF-8
// Bytes: 122 (123 with \0)
// Characters: 68
static const uint8_t _reencoder_test_string_utf_8_2_byte[] = {
	0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xba, 0xd0, 0xb0, 0x2c, 0x20, 0xd1, 0x81,
	0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb6, 0xd0, 0xb0, 0xd1, 0x89, 0xd0, 0xb0,
	0xd1, 0x8f, 0x20, 0x32, 0x20, 0xd0, 0xb1, 0xd0, 0xb0, 0xd0, 0xb9, 0xd1, 0x82, 0xd0, 0xbe, 0xd0,
	0xb2, 0xd1, 0x8b, 0xd0, 0xb5, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xb5,
	0xd0, 0xb4, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd1, 0x8c,
	0xd0, 0xbd, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb8, 0x20, 0xd0, 0xbf, 0xd1, 0x80, 0xd0,
	0xb8, 0x20, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb8, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb2,
	0xd0, 0xba, 0xd0, 0xb5, 0x20, 0x75, 0x74, 0x66, 0x2d, 0x38, 0x00
};

// Purpose: Valid UTF-8 String (3-byte characters)
// String Contents: 以 utf-8 编码时包含 3 个字节序列的字符串
// Encoding: UTF-8
// Bytes: 55 (56 with \0)
// Characters: 25
static const uint8_t _reencoder_test_string_utf_8_3_byte[] = {
	0xe4, 0xbb, 0xa5, 0x20, 0x75, 0x74, 0x66, 0x2d, 0x38, 0x20, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81,
	0xe6, 0x97, 0xb6, 0xe5, 0x8c, 0x85, 0xe5, 0x90, 0xab, 0x20, 0x33, 0x20, 0xe4, 0xb8, 0xaa, 0xe5,
	0xad, 0x97, 0xe8, 0x8a, 0x82, 0xe5, 0xba, 0x8f, 0xe5, 0x88, 0x97, 0xe7, 0x9a, 0x84, 0xe5, 0xad,
	0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0x00
};

// Purpose: Valid UTF-8 String (4-byte characters)
// String Contents: 🅰 🆂🆃🆁🅸🅽🅶 🆃🅷🅰🆃 🅲🅾🅽🆃🅰🅸🅽🆂 4 🅱🆈🆃🅴 🆂🅴🆀🆄🅴🅽🅲🅴🆂 🆆🅷🅴🅽 🅴🅽🅲🅾🅳🅴🅳 🅸🅽 🆄🆃🅵-8
// Encoding: UTF-8
// Bytes: 205 (206 with \0)
// Characters: 61
static const uint8_t _reencoder_test_string_utf_8_4_byte[] = {
	0xf0, 0x9f, 0x85, 0xb0, 0x20, 0xf0, 0x9f, 0x86, 0x82, 0xf0, 0x9f, 0x86, 0x83, 0xf0, 0x9f, 0x86,
	0x81, 0xf0, 0x9f, 0x85, 0xb8, 0xf0, 0x9f, 0x85, 0xbd, 0xf0, 0x9f, 0x85, 0xb6, 0x20, 0xf0, 0x9f,
	0x86, 0x83, 0xf0, 0x9f, 0x85, 0xb7, 0xf0, 0x9f, 0x85, 0xb0, 0xf0, 0x9f, 0x86, 0x83, 0x20, 0xf0,
	0x9f, 0x85, 0xb2, 0xf0, 0x9f, 0x85, 0xbe, 0xf0, 0x9f, 0x85, 0xbd, 0xf0, 0x9f, 0x86, 0x83, 0xf0,
	0x9f, 0x85, 0xb0, 0xf0, 0x9f, 0x85, 0xb8, 0xf0, 0x9f, 0x85, 0xbd, 0xf0, 0x9f, 0x86, 0x82, 0x20,
	0x34, 0x20, 0xf0, 0x9f, 0x85, 0xb1, 0xf0, 0x9f, 0x86, 0x88, 0xf0, 0x9f, 0x86, 0x83, 0xf0, 0x9f,
	0x85, 0xb4, 0x20, 0xf0, 0x9f, 0x86, 0x82, 0xf0, 0x9f, 0x85, 0xb4, 0xf0, 0x9f, 0x86, 0x80, 0xf0,
	0x9f, 0x86, 0x84, 0xf0, 0x9f, 0x85, 0xb4, 0xf0, 0x9f, 0x85, 0xbd, 0xf0, 0x9f, 0x85, 0xb2, 0xf0,
	0x9f, 0x85, 0xb4, 0xf0, 0x9f, 0x86, 0x82, 0x20, 0xf0, 0x9f, 0x86, 0x86, 0xf0, 0x9f, 0x85, 0xb7,
	0xf0, 0x9f, 0x85, 0xb4, 0xf0, 0x9f, 0x85, 0xbd, 0x20, 0xf0, 0x9f, 0x85, 0xb4, 0xf0, 0x9f, 0x85,
	0xbd, 0xf0, 0x9f, 0x85, 0xb2, 0xf0, 0x9f, 0x85, 0xbe, 0xf0, 0x9f, 0x85, 0xb3, 0xf0, 0x9f, 0x85,
	0xb4, 0xf0, 0x9f, 0x85, 0xb3, 0x20, 0xf0, 0x9f, 0x85, 0xb8, 0xf0, 0x9f, 0x85, 0xbd, 0x20, 0xf0,
	0x9f, 0x86, 0x84, 0xf0, 0x9f, 0x86, 0x83, 0xf0, 0x9f, 0x85, 0xb5, 0x2d, 0x38, 0x00
};

// Purpose: Long UTF-8 String (For memory testing purposes)
// String Contents: On the beach at night,~Stands a child with her father,~Watching the east, the autumn sky.~~Up through the darkness,~While ravening clouds, the burial clouds, in black masses spreading,~Lower sullen and fast athwart and down the sky,~Amid a transparent clear belt of ether yet left in the east,~Ascends large and calm the lord-star Jupiter,~And nigh at hand, only a very little above,~Swim the delicate sisters the Pleiades.~~From the beach the child holding the hand of her father,~Those burial-clouds that lower victorious soon to devour all,~Watching, silently weeps.~~Weep not, child,~Weep not, my darling,~With these kisses let me remove your tears,~The ravening clouds shall not long be victorious,~They shall not long possess the sky, they devour the stars only in apparition,~Jupiter shall emerge, be patient, watch again another night, the Pleiades shall emerge,~They are immortal, all those stars both silvery and golden shall shine out again,~The great stars and the little ones shall shine out again, they endure,~The vast immortal suns and the long-enduring pensive moons shall again shine.~~Then dearest child mournest thou only for Jupiter?~Considerest thou alone the burial of the stars?~~Something there is,~(With my lips soothing thee, adding I whisper,~I give thee the first suggestion, the problem and indirection,)~Something there is more immortal even than the stars,~(Many the burials, many the days and nights, passing away,)~Something that shall endure longer even than lustrous Jupiter~Longer than sun or any revolving satellite,~Or the radiant sisters the Pleiades.~
// Encoding: UTF-8
// Bytes: 1592 (1593 with \0)
// Characters: 1592
static const uint8_t _reencoder_test_string_utf_8_long_sequence[] = {
	0x4f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x65, 0x61, 0x63, 0x68, 0x20, 0x61, 0x74, 0x20,
	0x6e, 0x69, 0x67, 0x68, 0x74, 0x2c, 0x7e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x73, 0x20, 0x61, 0x20,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x68, 0x65, 0x72, 0x20, 0x66,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x2c, 0x7e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x65, 0x61, 0x73, 0x74, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x75,
	0x74, 0x75, 0x6d, 0x6e, 0x20, 0x73, 0x6b, 0x79, 0x2e, 0x7e, 0x7e, 0x55, 0x70, 0x20, 0x74, 0x68,
	0x72, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x61, 0x72, 0x6b, 0x6e, 0x65,
	0x73, 0x73, 0x2c, 0x7e, 0x57, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x72, 0x61, 0x76, 0x65, 0x6e, 0x69,
	0x6e, 0x67, 0x20, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62,
	0x75, 0x72, 0x69, 0x61, 0x6c, 0x20, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x2c, 0x20, 0x69, 0x6e,
	0x20, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x20, 0x6d, 0x61, 0x73, 0x73, 0x65, 0x73, 0x20, 0x73, 0x70,
	0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2c, 0x7e, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x20, 0x73,
	0x75, 0x6c, 0x6c, 0x65, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x66, 0x61, 0x73, 0x74, 0x20, 0x61,
	0x74, 0x68, 0x77, 0x61, 0x72, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x64, 0x6f, 0x77, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x73, 0x6b, 0x79, 0x2c, 0x7e, 0x41, 0x6d, 0x69, 0x64, 0x20, 0x61, 0x20,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x63, 0x6c, 0x65, 0x61,
	0x72, 0x20, 0x62, 0x65, 0x6c, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20,
	0x79, 0x65, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x65, 0x61, 0x73, 0x74, 0x2c, 0x7e, 0x41, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x73, 0x20, 0x6c, 0x61,
	0x72, 0x67, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x61, 0x6c, 0x6d, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x6c, 0x6f, 0x72, 0x64, 0x2d, 0x73, 0x74, 0x61, 0x72, 0x20, 0x4a, 0x75, 0x70, 0x69, 0x74,
	0x65, 0x72, 0x2c, 0x7e, 0x41, 0x6e, 0x64, 0x20, 0x6e, 0x69, 0x67, 0x68, 0x20, 0x61, 0x74, 0x20,
	0x68, 0x61, 0x6e, 0x64, 0x2c, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x61, 0x20, 0x76, 0x65, 0x72,
	0x79, 0x20, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x76, 0x65, 0x2c, 0x7e,
	0x53, 0x77, 0x69, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x20, 0x73, 0x69, 0x73, 0x74, 0x65, 0x72, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x50, 0x6c,
	0x65, 0x69, 0x61, 0x64, 0x65, 0x73, 0x2e, 0x7e, 0x7e, 0x46, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x62, 0x65, 0x61, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x20, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x68, 0x61,
	0x6e, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x68, 0x65, 0x72, 0x20, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x2c, 0x7e, 0x54, 0x68, 0x6f, 0x73, 0x65, 0x20, 0x62, 0x75, 0x72, 0x69, 0x61, 0x6c, 0x2d, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x20, 0x76, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6f, 0x75, 0x73, 0x20, 0x73, 0x6f, 0x6f, 0x6e,
	0x20, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x76, 0x6f, 0x75, 0x72, 0x20, 0x61, 0x6c, 0x6c, 0x2c, 0x7e,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74,
	0x6c, 0x79, 0x20, 0x77, 0x65, 0x65, 0x70, 0x73, 0x2e, 0x7e, 0x7e, 0x57, 0x65, 0x65, 0x70, 0x20,
	0x6e, 0x6f, 0x74, 0x2c, 0x20, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x2c, 0x7e, 0x57, 0x65, 0x65, 0x70,
	0x20, 0x6e, 0x6f, 0x74, 0x2c, 0x20, 0x6d, 0x79, 0x20, 0x64, 0x61, 0x72, 0x6c, 0x69, 0x6e, 0x67,
	0x2c, 0x7e, 0x57, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x73, 0x65, 0x20, 0x6b, 0x69, 0x73,
	0x73, 0x65, 0x73, 0x20, 0x6c, 0x65, 0x74, 0x20, 0x6d, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x74, 0x65, 0x61, 0x72, 0x73, 0x2c, 0x7e, 0x54, 0x68,
	0x65, 0x20, 0x72, 0x61, 0x76, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x73, 0x20, 0x73, 0x68, 0x61, 0x6c, 0x6c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x6c, 0x6f, 0x6e, 0x67,
	0x20, 0x62, 0x65, 0x20, 0x76, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6f, 0x75, 0x73, 0x2c, 0x7e,
	0x54, 0x68, 0x65, 0x79, 0x20, 0x73, 0x68, 0x61, 0x6c, 0x6c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x6c,
	0x6f, 0x6e, 0x67, 0x20, 0x70, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x73, 0x6b, 0x79, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x79, 0x20, 0x64, 0x65, 0x76, 0x6f, 0x75, 0x72,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x72, 0x73, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20,
	0x69, 0x6e, 0x20, 0x61, 0x70, 0x70, 0x61, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x7e, 0x4a,
	0x75, 0x70, 0x69, 0x74, 0x65, 0x72, 0x20, 0x73, 0x68, 0x61, 0x6c, 0x6c, 0x20, 0x65, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x2c, 0x20, 0x62, 0x65, 0x20, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2c,
	0x20, 0x77, 0x61, 0x74, 0x63, 0x68, 0x20, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x6e, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x20, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x50, 0x6c, 0x65, 0x69, 0x61, 0x64, 0x65, 0x73, 0x20, 0x73, 0x68, 0x61, 0x6c, 0x6c, 0x20, 0x65,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x2c, 0x7e, 0x54, 0x68, 0x65, 0x79, 0x20, 0x61, 0x72, 0x65, 0x20,
	0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2c, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x68,
	0x6f, 0x73, 0x65, 0x20, 0x73, 0x74, 0x61, 0x72, 0x73, 0x20, 0x62, 0x6f, 0x74, 0x68, 0x20, 0x73,
	0x69, 0x6c, 0x76, 0x65, 0x72, 0x79, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x67, 0x6f, 0x6c, 0x64, 0x65,
	0x6e, 0x20, 0x73, 0x68, 0x61, 0x6c, 0x6c, 0x20, 0x73, 0x68, 0x69, 0x6e, 0x65, 0x20, 0x6f, 0x75,
	0x74, 0x20, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x2c, 0x7e, 0x54, 0x68, 0x65, 0x20, 0x67, 0x72, 0x65,
	0x61, 0x74, 0x20, 0x73, 0x74, 0x61, 0x72, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x20, 0x6f, 0x6e, 0x65, 0x73, 0x20, 0x73, 0x68, 0x61,
	0x6c, 0x6c, 0x20, 0x73, 0x68, 0x69, 0x6e, 0x65, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x61, 0x67, 0x61,
	0x69, 0x6e, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x79, 0x20, 0x65, 0x6e, 0x64, 0x75, 0x72, 0x65, 0x2c,
	0x7e, 0x54, 0x68, 0x65, 0x20, 0x76, 0x61, 0x73, 0x74, 0x20, 0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74,
	0x61, 0x6c, 0x20, 0x73, 0x75, 0x6e, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x6c, 0x6f, 0x6e, 0x67, 0x2d, 0x65, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x65,
	0x6e, 0x73, 0x69, 0x76, 0x65, 0x20, 0x6d, 0x6f, 0x6f, 0x6e, 0x73, 0x20, 0x73, 0x68, 0x61, 0x6c,
	0x6c, 0x20, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x20, 0x73, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x7e, 0x7e,
	0x54, 0x68, 0x65, 0x6e, 0x20, 0x64, 0x65, 0x61, 0x72, 0x65, 0x73, 0x74, 0x20, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x20, 0x6d, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x73, 0x74, 0x20, 0x74, 0x68, 0x6f, 0x75,
	0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x4a, 0x75, 0x70, 0x69, 0x74, 0x65,
	0x72, 0x3f, 0x7e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x65, 0x73, 0x74, 0x20, 0x74,
	0x68, 0x6f, 0x75, 0x20, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x75,
	0x72, 0x69, 0x61, 0x6c, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x72,
	0x73, 0x3f, 0x7e, 0x7e, 0x53, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x2c, 0x7e, 0x28, 0x57, 0x69, 0x74, 0x68, 0x20, 0x6d, 0x79,
	0x20, 0x6c, 0x69, 0x70, 0x73, 0x20, 0x73, 0x6f, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x74,
	0x68, 0x65, 0x65, 0x2c, 0x20, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x49, 0x20, 0x77, 0x68,
	0x69, 0x73, 0x70, 0x65, 0x72, 0x2c, 0x7e, 0x49, 0x20, 0x67, 0x69, 0x76, 0x65, 0x20, 0x74, 0x68,
	0x65, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x73, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x29, 0x7e, 0x53, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67,
	0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x69,
	0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x61,
	0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x72, 0x73, 0x2c, 0x7e, 0x28, 0x4d, 0x61,
	0x6e, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x75, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x2c, 0x20,
	0x6d, 0x61, 0x6e, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x61, 0x79, 0x73, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2c, 0x20, 0x70, 0x61, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x20, 0x61, 0x77, 0x61, 0x79, 0x2c, 0x29, 0x7e, 0x53, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69,
	0x6e, 0x67, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x73, 0x68, 0x61, 0x6c, 0x6c, 0x20, 0x65, 0x6e,
	0x64, 0x75, 0x72, 0x65, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x72, 0x20, 0x65, 0x76, 0x65, 0x6e,
	0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x6f, 0x75, 0x73, 0x20, 0x4a,
	0x75, 0x70, 0x69, 0x74, 0x65, 0x72, 0x7e, 0x4c, 0x6f, 0x6e, 0x67, 0x65, 0x72, 0x20, 0x74, 0x68,
	0x61, 0x6e, 0x20, 0x73, 0x75, 0x6e, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x72, 0x65,
	0x76, 0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74,
	0x65, 0x2c, 0x7e, 0x4f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e,
	0x74, 0x20, 0x73, 0x69, 0x73, 0x74, 0x65, 0x72, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x50, 0x6c,
	0x65, 0x69, 0x61, 0x64, 0x65, 0x73, 0x2e, 0x7e, 0x00
};


// Purpose: Invalid UTF-8 String (Invalid leading byte 0x80)
// String Contents: UTF-8 Invalid: Invalid lead byte: \x80
// Encoding: UTF-8
// Bytes: 35 (36 with \0)
// Characters: NA
static const uint8_t _reencoder_test_string_utf_8_invalid_lead[] = {
	0x55, 0x54, 0x46, 0x2d, 0x38, 0x20, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x3a, 0x20, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x6c, 0x65, 0x61, 0x64, 0x20, 0x62, 0x79, 0x74, 0x65,
	0x3a, 0x20, 0x80, 0x00
};

// Purpose: Invalid UTF-8 String (Truncated sequence)
// String Contents: UTF-8 Invalid: Truncated 3-byte sequence: \xE2\x82
// Encoding: UTF-8
// Bytes: 44 (45 with \0)
// Characters: NA
static const uint8_t _reencoder_test_string_utf_8_truncated[] = {
	0x55, 0x54, 0x46, 0x2d, 0x38, 0x20, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x3a, 0x20, 0x54,
	0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x20, 0x33, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x20,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x20, 0xe2, 0x82, 0x00
};


// Purpose: Invalid UTF-8 String (Second byte is another lead byte)
// String Contents: UTF-8 Invalid: Second byte is a lead byte: \xC0
// Encoding: UTF-8
// Bytes: 45 (46 with \0)
// Characters: NA
static const uint8_t _reencoder_test_string_utf_8_invalid_cont[] = {
	0x55, 0x54, 0x46, 0x2d, 0x38, 0x20, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x3a, 0x20, 0x43,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x62, 0x79, 0x74, 0x65,
	0x20, 0x61, 0x74, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x3a, 0x20, 0xc2, 0xc0, 0x00
};

// Purpose: Invalid UTF-8 String (Overlong 2-byte encoding)
// String Contents: UTF-8 Invalid: Overlong 2-byte encoding of '/': \xC0\xAF
// Encoding: UTF-8
// Bytes: 50 (51 with \0)
// Characters: NA
static const uint8_t _reencoder_test_string_utf_8_overlong_2[] = {
	0x55, 0x54, 0x46, 0x2d, 0x38, 0x20,	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x3a, 0x20, 0x4f,
	0x76, 0x65, 0x72, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x32, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x20, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x20, 0x27, 0x2f, 0x27, 0x3a, 0x20,
	0xc0, 0xaf, 0x00
};

// Purpose: Invalid UTF-8 String (Overlong 3-byte encoding)
// String Contents: UTF-8 Invalid: Overlong 3-byte encoding of U+0000: \xE0\x80\x80
// Encoding: UTF-8
// Bytes: 54 (55 with \0)
// Characters: NA
static const uint8_t _reencoder_test_string_utf_8_overlong_3[] = {
	0x55, 0x54, 0x46, 0x2d, 0x38, 0x20, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x3a, 0x20, 0x4f,
	0x76, 0x65, 0x72, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x33, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x20, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x20, 0x55, 0x2B, 0x30, 0x30, 0x30,
	0x30, 0x3a, 0x20, 0xe0, 0x80, 0x80, 0x00
};

// Purpose: Invalid UTF-8 String (Overlong 4-byte encoding)
// String Contents: UTF-8 Invalid: Overlong 4-byte encoding of U+0000: \xF0\x80\x80\x80
// Encoding: UTF-8
// Bytes: 55 (56 with \0)
// Characters: NA
static const uint8_t _reencoder_test_string_utf_8_overlong_4[] = {
	0x55, 0x54, 0x46, 0x2d, 0x38, 0x20, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x3a, 0x20, 0x4f,
	0x76, 0x65, 0x72, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x34, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x20, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x20, 0x55, 0x2b, 0x30, 0x30, 0x30,
	0x30, 0x3a, 0x20, 0xf0, 0x80, 0x80, 0x80, 0x00
};

// Purpose: Invalid UTF-8 String (Surrogate pair in UTF-8 encoding)
// String Contents: UTF-8 Invalid: Surrogate pair: \xED\xA0\x80
// Encoding: UTF-8
// Bytes: 34 (35 with \0)
// Characters: NA
static const uint8_t _reencoder_test_string_utf_8_surrogate_pair[] = {
	0x55, 0x54, 0x46, 0x2d, 0x38, 0x20, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x3a, 0x20, 0x53,
	0x75, 0x72, 0x72, 0x6f, 0x67, 0x61, 0x74, 0x65, 0x20, 0x70, 0x61, 0x69, 0x72, 0x3a, 0x20, 0xed,
	0xa0, 0x80, 0x00
};

// Purpose: Invalid UTF-8 String (Char too big)
// String Contents: UTF-8 Invalid: Code point > U+10FFFF: \xF4\x90\x80\x80
// Encoding: UTF-8
// Bytes: 42 (43 with \0)
// Characters: NA
static const uint8_t _reencoder_test_string_utf_8_out_of_range[] = {
	0x55, 0x54, 0x46, 0x2d, 0x38, 0x20, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x3a, 0x20, 0x43,
	0x6f, 0x64, 0x65, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x3e, 0x20, 0x55, 0x2b, 0x31, 0x30,
	0x46, 0x46, 0x46, 0x46, 0x3a, 0x20, 0xf4, 0x90, 0x80, 0x80, 0x00
};
